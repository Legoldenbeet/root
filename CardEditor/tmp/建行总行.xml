<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 U (http://www.xmlspy.com) by et8 (et8) -->
<!-- edited with XML Spy v4.2 U (http://www.xmlspy.com) by Kiushan Pirzadeh (Visa) kpirzade@visa.com -->
<ApplicationProfile Name="????????" ProfileVersion="1.0.0" UniqueID="00001AAAAA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="GP ApplicationProfile.xsd">
	<Revisions>
		<Revision By="Kiushan Pirzadeh" Date="2002-02-13" Digest="0000" ProfileID="00001AAAAA" Time="15:54:00" Version="1.0.0"/>
	</Revisions>
	<ConflictRules>
		<!-- Ensure enough memory is on the card -->
		<!-- Make sure memory units are in bytes -->
		<ConflictRule Rule="==" Source="CardProfile.CardManufacturerProduct.Chip.ResourcesAvailable.Unit" Target="bytes"/>
		<!-- Check amount of RAM on the card -->
		<ConflictRule Rule="&gt;=" Source="CardProfile.CardManufacturerProduct.Chip.ResourcesAvailable.RAM" Target="0"/>
		<!-- Check amount of EEPROM on the card -->
		<ConflictRule Rule="&gt;=" Source="CardProfile.CardManufacturerProduct.Chip.ResourcesAvailable.EEPROM" Target="0"/>
		<!-- Check amount of Flash on the card -->
		<ConflictRule Rule="&gt;=" Source="CardProfile.CardManufacturerProduct.Chip.ResourcesAvailable.Flash" Target="0"/>
		<!-- Ensure card is a Java card -->
		<ConflictRule Rule="==" Source="CardProfile.CardManufacturerProduct.Platform.Type" Target="JAVA"/>
		<!-- Ensure card is a GP card -->
		<ConflictRule Rule="==" Source="CardProfile.CardManufacturerProduct.Platform.OSPlatform" Target="GP"/>
		<ConflictRule Rule="==" Source="CardProfile.CardManufacturerProduct.Platform.OSVersion" Target="2.0.1"/>
	</ConflictRules>
	<ApplicationInfo Developer="KP" Domain="Tool" NonVolatileDataSpaceMin="4096" Owner="GlobalPlatform" Provider="GP" SubType="CM" Type="OP" Version="0.0.1" VolatileDataSpaceMin="100">
		<Privileges/>
		<LifeCycles>
			<LifeCycle Name="pre_PersoPrep"/>
			<LifeCycle Name="post_PersoPrep"/>
			<LifeCycle Name="INSTALLED" Value="01"/>
			<LifeCycle Name="OP_READY" Value="01"/>
			<LifeCycle Name="SELECTABLE" Value="03"/>
			<LifeCycle Name="INITIALIZED" Value="07"/>
			<LifeCycle Name="PERSONALIZED" Value="0F"/>
			<LifeCycle Name="SECURED" Value="0F"/>
			<LifeCycle Name="CARD_LOCKED" Value="7F"/>
			<LifeCycle Name="TERMINATED" Value="FF"/>
		</LifeCycles>
		<Codes>
			<Code ModuleID="0000100001"/>
		</Codes>
	</ApplicationInfo>

<NormalParater dataTypeVersion="1" name="dataType" value="1"/>	
<NormalParater name="Base64DecodeTag" value=""/>
	<NormalParater name="BlankTo20Tag" value=""/>
	<NormalParater name="DgiWithoutTag" value=""/>//union data


	<DecryptTags>
	<DecryptTag mech="ECB" name="TK" value="57|9F61"/>
	<DecryptTag mech="ECB" name="KEK" value="EF04|EF06|EF08|EF10|EF11|EF12|EF13|EF14|EF15|EF16"/>
	</DecryptTags>

	<CustomParater name="hashMapNum" value="3"/>
	<CustomParater name="RepeatTag" value="tag91039F38|2*tag92079F10|2*tag020593|1*tag02069F46|1*tag02049F0D|1*tag02049F0E|1*tag02049F0F|1*tag02059F4A|1*tag02048E|1*"/>


	
	<Key External="false" Name="KSCmac" ProfileID=""/>
	<Key External="false" Name="KSCenc" ProfileID=""/>
	<Key External="false" Name="KSCkek" ProfileID=""/>
	<Key External="false" Name="CDKenc" ProfileID=""/>
	<Key External="false" Name="CDKmac" ProfileID=""/>
	<Key External="false" Name="CDKkek" ProfileID=""/>
	
	
	<Key External="true" Name="TK" ProfileID="A000000000009226"/>
	<Key External="true" Name="KEK" ProfileID="A000000000009227"/>
	<Key External="true" Name="KMC" ProfileID="A000000000009228"/>
	<Key External="true" Name="BANKKEK" ProfileID="A000000000009229"/>
	<Key External="true" Name="MTKMC" ProfileID="A000000000009230"/>

	
	<Key External="false" Name="KMU" ProfileID=""/>


	

	<!-- created in programe -->
	<!-- the last 2 AID will be supplied as an external data element per card, used when derive CMK and replace Key -->
	<DataElement Encoding="HEX" External="true" FixedLength="true" Length="9" Name="AID" ReadWrite="true" Type="BYTESTRING" Update="true"/>
	<!-- CSN will be supplied as an external data element per card, used when derive CMK and replace Key -->
	<DataElement Encoding="HEX" External="true" FixedLength="true" Length="9" Name="CSN" ReadWrite="true" Type="BYTESTRING" Update="true"/>
	<DataElement Encoding="HEX" External="true" FixedLength="false" Name="issuerIIN" Tag="0042" TagEncoding="EMV" Type="BYTESTRING" Update="false"/>
	<!-- the Tag which indicate wether KMC was supplied in card -->
	<DataElement Encoding="HEX" External="true" FixedLength="false" Name="KMC_TAG" Tag="0042" TagEncoding="EMV" Type="BOOLEAN" Update="false"/>
	<!-- the dgi data element -->
	<DataElement Encoding="HEX" External="false" FixedLength="false" Name="BIN" Type="BYTESTRING" Update="false" Value="11223344"/>	
	<DataElement Encoding="HEX" External="true" Name="CPS_Output" Optional="false" ReadWrite="true" Type="BYTESTRING" Update="true"/>		
	<DataElement Encoding="HEX" External="true" Name="tag010157" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag01019F1F" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag01019F61" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag01019F62" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag01015F20" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="ASCII" External="true" Name="tag01025F20" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag01029F61" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag01029F62" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02015A" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02015F24" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02015F28" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02015F34" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02018E" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02019F07" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02019F0D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02019F0E" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02019F0F" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag020290" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag020293" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02029F4A" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag020393" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02039F46" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02039F47" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02039F48" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02045A" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02045F24" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02049F07" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02048E" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02049F0D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02049F0E" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02049F0F" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02045F28" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag02055F25" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02058F" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag020592" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02059F32" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02059F47" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02059F48" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02059F49" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02059F4A" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag020593" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag02069F4B" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02069F5D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02069F46" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02069F47" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02069F48" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag02075F34" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag03015A" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03015F24" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03015F28" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03015F34" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03018E" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03019F07" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03019F0D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03019F0E" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03018C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03018D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03015F30" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03019F08" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03019F42" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03019F49" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03019F63" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag03025F30" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03028C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03028D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03029F08" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag030290" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03029F32" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag030292" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03025F25" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag03039F46" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03039F74" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03038F" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag03049F14" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag03049F23" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag04019F14" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag04019F23" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0A018C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0A018D" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag0D019F58" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F59" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F5F" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F53" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F72" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F54" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F75" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F73" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F5C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F4F" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F77" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F78" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F79" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F6D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F6B" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F68" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F6C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D019F5D" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag0E0157" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag0E015F20" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E015F34" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F4F" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F51" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F52" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F53" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F54" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F55" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F56" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F57" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F76" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag0E015F20" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F36" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F34" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag0E019F5C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F5D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F68" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F6B" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F6C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F6D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F77" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F78" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E019F79" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag910250" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag91025F2D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag910287" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag91029F38" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag91029F4D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9102A5" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9102BF0C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag910287" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag91029F11" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag91029F12" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9102BF0C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag91029F4D" Optional="true" Type="BYTESTRING"/>


<DataElement Encoding="ASCII" External="true" Name="tag910350" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag91035F2D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag910387" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag91039F38" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag91039F4D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9103A5" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9103BF0C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag91039F11" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag91039F12" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag910482" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag910494" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag92009F10" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag920382" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag920394" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag920482" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag920494" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag920682" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag920694" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag920782" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag920794" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag92079F10" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag920882" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag920894" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0101" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0102" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0201" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0202" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0203" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0204" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0205" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0206" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0301" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0302" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0303" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0304" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0401" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0A01" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0D01" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0E01" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8000" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8101" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8102" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8103" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8104" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8105" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8201" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8202" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8203" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8204" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi8205" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi9000" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi9102" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi9103" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9104" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi9200" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9203" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9204" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9206" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9207" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag9208" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="dgi0000" Optional="true" Type="BYTESTRING"/>

<DataElement Encoding="HEX" External="true" Name="tag000161" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag00014F" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag000150" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag00019F12" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag000187" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag000173" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0001" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0002" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0002A5" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag00025F2D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag000288" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag00029F11" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0002BF0C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag00034F" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag000350" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag000387" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag000361" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0003BF0C" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0003A5" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0003" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0601" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag06019F4B" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag06019F5D" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="ASCII" External="true" Name="tag02059F74" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0006EF10" Optional="true" Type="BYTESTRING"/>
<DataElement Encoding="HEX" External="true" Name="tag0006" Optional="true" Type="BYTESTRING"/>

	<Function Name="appendRecord" Param="dgiTag,dgiLen,dgiValue">
		<Script><![CDATA[
			  dgi = new ByteBuffer();
			  dgi.append(dgiTag);
			  dgi.append(dgiLen);
			  dgi.append(dgiValue);
		      if(dgi!=null)
		      {
          	     this.storeData(dgi.toByteString(),0x00,0x9000,0x00);
          	 }
          	 else
          	 {
          	     GPSystem.trace("this DGI is null");
          	 }
      ]]></Script>
	</Function>

	<Function Name="putData" Param="dgi">
		<Script><![CDATA[
		if(dgi!=null)
			{
		         //dgi0702 and dgi0703(only for applete 1.2) are special,because it's been writen partly(TLV940C) when install application
        		 if((dgi.getTag()==0x0702)||(dgi.getTag()==0x0703))
		         {
  	    		    dgiTlvList = new TLVList(dgi.getValue(),EMV);
		  			MyTLV=dgiTlvList.find(0x82);
					this.sendApdu(0x80, 0xDA, 0x00, 0x82, MyTLV.getValue());
		         }
		         else //not 0702, not 0703
        		 {
		         	dgiTlvList = new TLVList(dgi.getValue(),EMV);  //dgi is a byteString
        		 	for(i=0;i< dgiTlvList.length;i++)
		         	{
        		    	 MyTLV=dgiTlvList.index(i);
             			this.sendApdu(0x80, 0xDA, MyTLV.getTag()>>8, MyTLV.getTag() & 0xFF, MyTLV.getValue());
         			}
         		}
         	}
         	else
         	{
         	    GPSystem.trace("this DGI is null");
         	}
      ]]></Script>
	</Function>

	<Function Name="putDESKey" Param="myKey,dgiValue">
		<Script><![CDATA[
   			   //put the key by putKey command, need to test by songjie
    		   //**********new putDESKey, phase3
		       //DGI9103=UDK+MAC+ENC
		         //set the KEK of secureChannel, encrypt all ENC/MAC/UDK by PSK
                 this.secureChannel.setKekKey(myKey.PSK);
				 //use a special object to get the properties of the application key
                 watchObject=GPSystem.getVendorObject("GPSupport");
				 	version = 0x00;
      			    index = 0x03;
      			    newVersion= 0x01;
      			    type = 0x81;
      			    DES = 0x80

		         if(dgiValue.bytes(0,16).toString()!="00000000000000000000000000000000")
		         {
		         	//UDK  Authentication Key ---"03"
      			    index = 0x03;
      			    myKey.UDK.setComponent(DES,dgiValue.bytes(0,16));
      			    checkValue=myKey.UDK.getKcv();
      			    this.putKey(version,newVersion,index,type,myKey.UDK,checkValue);
		         }
		         if(dgiValue.bytes(16,16).toString()!="00000000000000000000000000000000")
		         {
		       	    //MAC Key --- "02"
      			    index = 0x02;
      			    myKey.MAC.setComponent(DES,dgiValue.bytes(16,16));      			    
      			    checkValue=myKey.MAC.getKcv();
      			    this.putKey(version,newVersion,index,type,myKey.MAC,checkValue);
		         }
		         if(dgiValue.bytes(32,16).toString()!="00000000000000000000000000000000")
		         {
		       	    //ENC Key---"04"
				 	index = 0x04;
      			    myKey.ENC.setComponent(DES,dgiValue.bytes(32,16));				 	
      			    checkValue=myKey.ENC.getKcv();
      			    this.putKey(version,newVersion,index,type,myKey.ENC,checkValue);
		         }
      ]]></Script>
	</Function>

	<Function Name="putRSAKey" Param="myKey,dgiTag,dgiValue">
		<Script><![CDATA[
	  			//DGI 8101 8103
  				//DGI 8102 8104
 			  	type=new ByteString("A2",HEX);
	      		//dgi is clear data
    	  		clearKey=dgiValue.pad(Crypto.EMV_PAD);  //L+key+padding
      			keyData = this.crypto.encrypt(myKey.PSK,this.crypto.DES_ECB,clearKey);

	  			comData=new ByteBuffer();
  				if( ((dgiTag & 0XFF)==0x01) || ((dgiTag & 0XFF)==0x03) )
      				 comData.append("02").append(type).append(keyData.getL()).append(keyData);
  				else  //here keyVersion must be 02,can't be 03
      				 comData.append("02").append(type).append(keyData.getL()).append(keyData);

	  			if((dgiTag & 0XFF) > 0x02)  //03,04 is modulus(keyIndex=0x01)
    	  			 this.sendApdu(0X80, 0xD8, 0x00, 0x01,comData.toByteString());  //ICCSK Modulus
  				else // 01,02 is exponent(keyIndex=0x02)
      	 			this.sendApdu(0X80, 0xD8, 0x00, 0x02,comData.toByteString());  //ICCSK Exponent
      ]]></Script>
	</Function>

	
	 <Function Name="nativeDel" Param="myKey,dgiValue">
		<Script><![CDATA[
			/*	     
   			this.card.reset(0x05);		 
 			 this.sendApdu(0XA0, 0x20, 0x00, 0x0E,new ByteString("3634373232323838",HEX)); 			 
 			 this.sendApdu(0X80, 0x0E, 0x00, 0x00); 			 
 			 this.sendApdu(0X80, 0xE0, 0x8A, 0x9B,new ByteString("3F00808376838A",HEX)); 			 
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x01,new ByteString("3A8054013331323334FFFFFFFF",HEX));  			  
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x02,new ByteString("3A8054023331323334FFFFFFFF",HEX)); 			   
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x05,new ByteString("3A805410333634373232323838",HEX)); 			    
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x0B,new ByteString("3A805430333634373232323838",HEX)); 			    
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x00,new ByteString("3B805401AA3733343839353733",HEX)); 			     
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x02,new ByteString("3B805402AA3938303736353734",HEX)); 			   
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x0E,new ByteString("3A8054A0333634373232323838",HEX));  
  		 this.sendApdu(0X80, 0xD4, 0x01, 0x00,new ByteString("F98054303357415443484441544154696D65434F53",HEX)); 
  		 */			 
			 this.card.reset(0x05);			
		  	this.sendApdu(0XA0, 0x20, 0x00, 0x0B,new ByteString("3634373232323838",HEX));					
				this.sendApdu(0X80, 0xE0, 0x5F, 0xFE,new ByteString("28000F8080FFFF",HEX));					
				this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00006162001933909866FF0200FC",HEX));
				this.sendApdu(0X80, 0xE0, 0x5F, 0xFF,new ByteString("2801F08080FFFF",HEX));						
				this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00CF0C112233445566AABBCCDD0102",HEX));						
				this.sendApdu(0X00, 0xD6, 0x00, 0x0F,new ByteString("7FF030404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F",HEX));
   		  this.sendApdu(0X80, 0xE0, 0x3F, 0x07,new ByteString("38000080800001FF325041592E5359532E4444463031",HEX));   		
   			this.sendApdu(0X00, 0xA4, 0x04, 0x00,new ByteString("325041592E5359532E4444463031",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x00, 0x00,new ByteString("3F00200154FFFF",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x5F, 0xFF,new ByteString("280170EF54FFFF",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00CF0C112233445566AABBCCDD0102",HEX));   				
   			this.sendApdu(0X00, 0xD6, 0x00, 0x0F,new ByteString("7FF030404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F",HEX));
   			
   			this.sendApdu(0X80, 0xE0, 0x5F, 0xFE,new ByteString("28000F8054FFFF",HEX));   		
   			this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00006162001933909866FF0200FC",HEX));	
   			this.card.reset(0x05);   			
   						this.sendApdu(0XA0, 0x20, 0x00, 0x0B,new ByteString("3634373232323838",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x3F, 0x0B,new ByteString("381B3080800001FFA000000333010101",HEX));   			
   			this.sendApdu(0X00, 0xA4, 0x04, 0x00,new ByteString("A000000333010101",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x00, 0x00,new ByteString("3F00184076FF03",HEX));   			
   			this.sendApdu(0X80, 0xD4, 0x01, 0x00,new ByteString("368076303311111111111111111111111111111111",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x5F, 0xFF,new ByteString("280FF08004FFFF",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00CF0C112233445566AABBCCDD0102",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x0F,new ByteString("7FF030404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x42,new ByteString("00AC140000000000000001000000000000000000000000",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x59,new ByteString("9300049F63010B",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x00, 0x00,new ByteString("000B00002E0F2D0BFF807600",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x5F, 0xFE,new ByteString("28000EEFEFFFFF",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00006162001933909866FF0200FC",HEX));   			
   		
               ]]></Script>
	</Function>
	
	 <Function Name="appDel" Param="myKey,dgiValue">
		<Script><![CDATA[
		     
   			this.card.reset(0x05);		 
 			 this.sendApdu(0XA0, 0x20, 0x00, 0x0E,new ByteString("3634373232323838",HEX)); 			 
 			 this.sendApdu(0X80, 0x0E, 0x00, 0x00); 			 
 			 this.sendApdu(0X80, 0xE0, 0x8A, 0x9B,new ByteString("3F00808376838A",HEX)); 			 
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x01,new ByteString("3A8054013331323334FFFFFFFF",HEX));  			  
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x02,new ByteString("3A8054023331323334FFFFFFFF",HEX)); 			   
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x05,new ByteString("3A805410333634373232323838",HEX)); 			    
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x0B,new ByteString("3A805430333634373232323838",HEX)); 			    
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x00,new ByteString("3B805401AA3733343839353733",HEX)); 			     
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x02,new ByteString("3B805402AA3938303736353734",HEX)); 			   
 			 this.sendApdu(0X80, 0xD4, 0x01, 0x0E,new ByteString("3A8054A0333634373232323838",HEX));  
  		 this.sendApdu(0X80, 0xD4, 0x01, 0x00,new ByteString("F98054303357415443484441544154696D65434F53",HEX)); 
  		 		 
			 this.card.reset(0x05);			
		  	this.sendApdu(0XA0, 0x20, 0x00, 0x0B,new ByteString("3634373232323838",HEX));					
				this.sendApdu(0X80, 0xE0, 0x5F, 0xFE,new ByteString("28000F8080FFFF",HEX));					
				this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00006162001933909866FF0200FC",HEX));
				this.sendApdu(0X80, 0xE0, 0x5F, 0xFF,new ByteString("2801F08080FFFF",HEX));						
				this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00CF0C112233445566AABBCCDD0102",HEX));						
				this.sendApdu(0X00, 0xD6, 0x00, 0x0F,new ByteString("7FF030404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F",HEX));
   		  this.sendApdu(0X80, 0xE0, 0x3F, 0x07,new ByteString("38000080800001FF325041592E5359532E4444463031",HEX));   		
   			this.sendApdu(0X00, 0xA4, 0x04, 0x00,new ByteString("325041592E5359532E4444463031",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x00, 0x00,new ByteString("3F00200154FFFF",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x5F, 0xFF,new ByteString("280170EF54FFFF",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00CF0C112233445566AABBCCDD0102",HEX));   				
   			this.sendApdu(0X00, 0xD6, 0x00, 0x0F,new ByteString("7FF030404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F",HEX));
   			
   			this.sendApdu(0X80, 0xE0, 0x5F, 0xFE,new ByteString("28000F8054FFFF",HEX));   		
   			this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00006162001933909866FF0200FC",HEX));	
   			this.card.reset(0x05);   			
   						this.sendApdu(0XA0, 0x20, 0x00, 0x0B,new ByteString("3634373232323838",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x3F, 0x0B,new ByteString("381B3080800001FFA000000333010101",HEX));   			
   			this.sendApdu(0X00, 0xA4, 0x04, 0x00,new ByteString("A000000333010101",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x00, 0x00,new ByteString("3F00184076FF03",HEX));   			
   			this.sendApdu(0X80, 0xD4, 0x01, 0x00,new ByteString("368076303311111111111111111111111111111111",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x5F, 0xFF,new ByteString("280FF08004FFFF",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00CF0C112233445566AABBCCDD0102",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x0F,new ByteString("7FF030404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F404142434445464748494A4B4C4D4E4F",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x42,new ByteString("00AC140000000000000001000000000000000000000000",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x59,new ByteString("9300049F63010B",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x00, 0x00,new ByteString("000B00002E0F2D0BFF807600",HEX));   			
   			this.sendApdu(0X80, 0xE0, 0x5F, 0xFE,new ByteString("28000EEFEFFFFF",HEX));   			
   			this.sendApdu(0X00, 0xD6, 0x00, 0x00,new ByteString("00006162001933909866FF0200FC",HEX));   			
   		
               ]]></Script>
	</Function>
	<Function Name="changePin" Param="myKey,dgiValue">
		<Script><![CDATA[
			  	plainPinData = dgiValue;
			  	out.println("plainPinData="+plainPinData);
				retryCount = plainPinData.bytes(9,1);
	  			encrypedPinData = this.crypto.encrypt(myKey.PSK,Crypto.DES_ECB,plainPinData.left(8));
  				pin = new ByteBuffer(encrypedPinData.left(8));
				this.sendApdu(0x80,0x24, 0x00, retryCount.toUnsigned(),pin.toByteString());			
      ]]></Script>

	</Function>
	<Function Name="endPersonalization" Param="comData">
		<Script><![CDATA[
     		//	this.sendApdu(0x80,0xE2,0x40, 0x0F, comData);
     			this.storeData(comData,0x01,0x9000,0x00);
      ]]></Script>
	</Function>
		<Function Name="encryptedBySkudek" Param="comData">
		<Script><![CDATA[
     		//	this.sendApdu(0x80,0xE2,0x40, 0x0F, comData);
     			this.storeData(comData,0x02,0x9000,0x00);
      ]]></Script>
	</Function>
	<Function Name="replaceKDC" Param="myKey,myObject">
		<Script><![CDATA[
			    derivationData = new ByteBuffer();
	            derivationKey = new String();	            
				this.securityDomain.secureChannel.initializeUpdate(0,0);
                watchObject=GPSystem.getVendorObject("GPSupport");
  			GPSystem.trace("finish initupdate ");  			
  			initResp = new ByteBuffer();  			
  			initResp = this.card.response.bytes(4,6);        
        
        //card enc
        derivationData.append(initResp).append("F001").append(initResp).append("0F01");        
				Crypto.deriveKey(this.key["KMC"], Crypto.DES_ECB, derivationData.toByteString(), this.key["KSCenc"]);
        GPSystem.trace("this.key:"+this.key["KSCenc"]);
				// card mac
				derivationData.clear();

				 derivationData.append(initResp).append("F002").append(initResp).append("0F02");        
				Crypto.deriveKey(this.key["KMC"], Crypto.DES_ECB, derivationData.toByteString(), this.key["KSCmac"]);
				 GPSystem.trace("this.key:"+this.key["KSCmac"]);
									

				// card dek
				derivationData.clear();

				 derivationData.append(initResp).append("F003").append(initResp).append("0F03");        
				Crypto.deriveKey(this.key["KMC"], Crypto.DES_ECB, derivationData.toByteString(), this.key["KSCkek"]);					
	       GPSystem.trace("this.key:"+this.key["KSCkek"]); 
				// Set the keys used by the secure channel - not sure on KEK key assignments
				this.securityDomain.secureChannel.setKekKey(this.key["KSCkek"]);			
				this.securityDomain.secureChannel.setEncKey(this.key["KSCenc"]);
				this.securityDomain.secureChannel.setMacKey(this.key["KSCmac"]);

				//replace the KDC
	      		keyVersion=0x01;
    	  		keyNewVersion=0x01;
      			keyIndex=0x01;
      			//this.securityDomain.putKey(keyVersion,keyNewVersion,keyIndex,0x81,myKey.CDKenc,myKey.CDKenc.getKcv(),0x81,myKey.CDKmac,myKey.CDKmac.getKcv(),0x81,myKey.CDKkek,myKey.CDKkek.getKcv());
      			this.putKey(keyVersion,keyNewVersion,keyIndex,0x81,myKey.CDKenc,myKey.CDKenc.getKcv(),0x81,myKey.CDKmac,myKey.CDKmac.getKcv(),0x81,myKey.CDKkek,myKey.CDKkek.getKcv());

      			//Verify keyVersion and checkValue
      			if(this.card.response.left(1).toUnsigned()!=keyNewVersion)
      				throw Error("key version incrrect");
      			if(!(this.card.response.bytes(1,3).toString()==myKey.CDKenc.getKcv().left(3).toString()))
      				throw Error("CDKenc kcv incorrect");
      			if(!(this.card.response.bytes(1+3,3).toString()==myKey.CDKmac.getKcv().left(3).toString()))
      				throw Error("CDKmac kcv incorrect");
      			if(!(this.card.response.bytes(1+3+3,3).toString()==myKey.CDKkek.getKcv().left(3).toString()))
      				throw Error("CDKkek kcv incorrect");
      ]]></Script>
	</Function>

      <Function Name="psePersonal" Param="pse,ppse">
		<Script><![CDATA[

			  NO_SECUREITY_LEVEL=0x00;
		      MACONLY= 0x01;
		      MACENC = 0x03;		     
   			this.card.reset(0x05);
		   	//1. Select application         
			this.securityDomain.select("325041592E5359532E4444463031");	 	     
			//2. Open secure channel		    
		   this.openSecureChannel(NO_SECUREITY_LEVEL);    
 
		this.sendApdu(0X80, 0xE2, 0x80, 0x00,new ByteString("910232A530BF0C2D612B4F07A0000003330101500A50424F43204445424954879F120F4341524420494D4147452030303332870101",HEX));


   			this.card.reset(0x05);
		   	//1. Select application
	 	    // this.securityDomain.select();
	 	    GPSystem.trace("Application id: " + "315041592E5359532E4444463031");
			  this.securityDomain.select("315041592E5359532E4444463031");
	 	     
			//2. Open secure channel
		      //this.openSecureChannel(MACENC);
		     this.openSecureChannel(NO_SECUREITY_LEVEL);
//   			this.sendApdu(0X80, 0xE2, 0x00, 0x00,new ByteString("010130702E612C4F08A000000333010101500B50424F43204372656469749F120F4341524420494D4147452030303031870101",HEX));
//  			 this.sendApdu(0X80, 0xE2, 0x80, 0x01,new ByteString("910214A5128801015F2D086573656E667264659F110101",HEX));
  	this.sendApdu(0X80, 0xE2, 0x00, 0x00,new ByteString("01011D701B61194F08A000000333010101500a50424F43204445424954870101",HEX));
  			 this.sendApdu(0X80, 0xE2, 0x80, 0x01,new ByteString("91020EA50C8801015F2D027A689F110101",HEX));
               ]]></Script>
	</Function>
	
	  <Function Name="allPutKey" Param="myKey,myObject">
		<Script><![CDATA[

			  NO_SECUREITY_LEVEL=0x00;
		      MACONLY= 0x01;
		      MACENC = 0x03;		     
   		 //1. Select pse application
		  //   this.sendApdu(0X00, 0xA4, 0x00, 0x00,new ByteString("3F00",HEX));
			//  this.sendApdu(0XA0, 0x20, 0x00, 0x0B,new ByteString("3634373232323838",HEX));
	 	  //   this.securityDomain.select("325041592E5359532E4444463031");
			//2. put key
				//GPSystem.trace("ppseputkey  start : ");	
		    //  this.putkey(myKey,myObject,NO_SECUREITY_LEVEL);
		   
		     

			//	 this.sendApdu(0X00, 0xA4, 0x00, 0x00,new ByteString("3F00",HEX));
			//  this.sendApdu(0XA0, 0x20, 0x00, 0x0B,new ByteString("3634373232323838",HEX));
    		//1. Select ppse application
	 	     //this.securityDomain.select("315041592E5359532E4444463031");
			  //2. put key
		     // this.putkey(myKey,myObject,NO_SECUREITY_LEVEL);
		      
		 //   	this.sendApdu(0X00, 0xA4, 0x00, 0x00,new ByteString("3F00",HEX));
		//	   this.sendApdu(0XA0, 0x20, 0x00, 0x0B,new ByteString("3634373232323838",HEX));
    		//1. Select application
	 	     //this.securityDomain.select("A0000003330101");
		this.securityDomain.select("A0000000030000");

			//2. put key
		      this.putkey(myKey,myObject,NO_SECUREITY_LEVEL); 
               ]]></Script>
	</Function>
	
	<Function Name="putkey" Param="myKey,myObject,level">
		<Script><![CDATA[
			    
			    
			   derivationData = new ByteBuffer();
	       derivationKey = new String();	
	       endPerson =  new ByteBuffer();           
				this.securityDomain.secureChannel.initializeUpdate(0,0);
				initResp = new ByteBuffer();  			
  			initResp = this.card.response.bytes(4,6);  
  			endPerson.append("CF0B").append(this.card.response.bytes(0,10)).append("00");      
				// Derive KSCenc
				derivationData.clear();
				derivationData.append("0182").append(this.card.response.bytes(12,2)).append("000000000000000000000000");
				Crypto.deriveKey(this.key["KMC"], Crypto.DES_CBC, derivationData.toByteString(), this.key["KSCenc"]);

				// Derive KSCmac
				derivationData.clear();
				derivationData.append("0101").append(this.card.response.bytes(12,2)).append("000000000000000000000000");
				Crypto.deriveKey(this.key["KMC"], Crypto.DES_CBC, derivationData.toByteString(), this.key["KSCmac"]);

				derivationData.clear();							
				derivationData.append("0181").append(this.card.response.bytes(12,2)).append("000000000000000000000000");
				Crypto.deriveKey(this.key["KMC"], Crypto.DES_CBC, derivationData.toByteString(), this.key["KSCkek"]);							
									
	
				// Set the keys used by the secure channel - not sure on KEK key assignments
		
				this.securityDomain.secureChannel.setKekKey(this.key["KSCkek"]);			
				this.securityDomain.secureChannel.setEncKey(this.key["KSCenc"]);
				this.securityDomain.secureChannel.setMacKey(this.key["KSCmac"]);

      				this.securityDomain.secureChannel.externalAuthenticate(level);
      			
      			 
				derivationData = new ByteBuffer();
	     			derivationKey = new String();	            
			
  			
        
       			 	//card enc
       			 	derivationData.clear();		
        			derivationData.append(initResp).append("F001").append(initResp).append("0F01");        
				Crypto.deriveKey(this.key["KMU"], Crypto.DES_ECB, derivationData.toByteString(), this.key["CDKenc"]);
       
				// card mac
				derivationData.clear();
				derivationData.append(initResp).append("F002").append(initResp).append("0F02");        
				Crypto.deriveKey(this.key["KMU"], Crypto.DES_ECB, derivationData.toByteString(), this.key["CDKmac"]);
								
						

				// card dek
				derivationData.clear();
				derivationData.append(initResp).append("F003").append(initResp).append("0F03");        
				Crypto.deriveKey(this.key["KMU"], Crypto.DES_ECB, derivationData.toByteString(), this.key["CDKkek"]);					
	      
				// Set the keys used by the secure channel - not sure on KEK key assignments
			 			

				//replace the KDC
	      			keyVersion=0x20;
    	  			keyNewVersion=0x20;
      				keyIndex=0x01;
      		 
GPSystem.trace(" putkey start : ------------------");
      				this.putKey(keyVersion,keyNewVersion,keyIndex,0x80,myKey.CDKenc,myKey.CDKenc.getKcv(),0x80,myKey.CDKmac,myKey.CDKmac.getKcv(),0x80,myKey.CDKkek,myKey.CDKkek.getKcv());
           
GPSystem.trace(" putkey end : ------------------");
         		 	//END PREPERSO
      				//this.sendApdu(0X80, 0xD6, 0x00, 0x00,endPerson.toByteString());
   
GPSystem.trace(" this.sendApdu end : ------------------");

      	
      ]]></Script>
	</Function>

<SecureChannel SecureChannel="SCP02" SecurityLevel="C_MAC">
		<OpenSecureChannel Param="level,isFirst">
			<Script><![CDATA[

      derivationData = new ByteBuffer();
	            derivationKey = new String();	            
				this.securityDomain.secureChannel.initializeUpdate(0,0);
                watchObject=GPSystem.getVendorObject("GPSupport");
  			GPSystem.trace("finish initupdate ");
  			
  		   initResp = new ByteBuffer();  			
  			initResp = this.card.response.bytes(4,6);  
        
        
        //card enc
        derivationData.clear();
        derivationData.append(initResp).append("F001").append(initResp).append("0F01");        
				Crypto.deriveKey(this.key["KMU"], Crypto.DES_ECB, derivationData.toByteString(), this.key["KSCenc"]);
       
				// card mac
				derivationData.clear();
				derivationData.append(initResp).append("F002").append(initResp).append("0F02");        
				Crypto.deriveKey(this.key["KMU"], Crypto.DES_ECB, derivationData.toByteString(), this.key["KSCmac"]);
				 
									

				// card dek
				derivationData.clear();
				derivationData.append(initResp).append("F003").append(initResp).append("0F03");        
				Crypto.deriveKey(this.key["KMU"], Crypto.DES_ECB, derivationData.toByteString(), this.key["KSCkek"]);					
	      
				// Set the keys used by the secure channel - not sure on KEK key assignments
				this.securityDomain.secureChannel.setKekKey(this.key["KSCkek"]);			
				this.securityDomain.secureChannel.setEncKey(this.key["KSCenc"]);
				this.securityDomain.secureChannel.setMacKey(this.key["KSCmac"]);

     

				// session enc
				derivationData.clear();
				derivationData.append("0182").append(this.card.response.bytes(12,2)).append("000000000000000000000000");
				Crypto.deriveKey(this.key["KSCenc"], Crypto.DES_CBC, derivationData.toByteString(), this.key["KSCenc"]);

				// Derive KSCmac
				derivationData.clear();
				derivationData.append("0101").append(this.card.response.bytes(12,2)).append("000000000000000000000000");
				Crypto.deriveKey(this.key["KSCmac"], Crypto.DES_CBC, derivationData.toByteString(), this.key["KSCmac"]);

					derivationData.clear();							
				derivationData.append("0181").append(this.card.response.bytes(12,2)).append("000000000000000000000000");
				Crypto.deriveKey(this.key["KSCkek"], Crypto.DES_CBC, derivationData.toByteString(), this.key["KSCkek"]);							
											
	
				// Set the keys used by the secure channel - not sure on KEK key assignments
		
				this.securityDomain.secureChannel.setKekKey(this.key["KSCkek"]);			
				this.securityDomain.secureChannel.setEncKey(this.key["KSCenc"]);
				this.securityDomain.secureChannel.setMacKey(this.key["KSCmac"]);
	
 GPSystem.trace(" externalAuthenticate2 start : ------------------");
      			this.securityDomain.secureChannel.externalAuthenticate(level);    
  
GPSystem.trace(" externalAuthenticate2 end : ------------------");

	      ]]></Script>
		</OpenSecureChannel>
	</SecureChannel>

<ScriptFragment Active="true" EndLifeCycle="postPersoPrep" Name="VSDC Data Preparation" StartLifeCycle="prePersoPrep">
		<Declaration External="true" Name="tag010157"/>
<Declaration External="true" Name="tag01019F1F"/>
<Declaration External="true" Name="tag01019F61"/>
<Declaration External="true" Name="tag01019F62"/>
<Declaration External="true" Name="tag01015F20"/>
<Declaration External="true" Name="tag01025F20"/>
<Declaration External="true" Name="tag01029F61"/>
<Declaration External="true" Name="tag01029F62"/>
<Declaration External="true" Name="tag02015A"/>
<Declaration External="true" Name="tag02015F24"/>
<Declaration External="true" Name="tag02015F28"/>
<Declaration External="true" Name="tag02015F34"/>
<Declaration External="true" Name="tag02018E"/>
<Declaration External="true" Name="tag02019F07"/>
<Declaration External="true" Name="tag02019F0D"/>
<Declaration External="true" Name="tag02019F0E"/>
<Declaration External="true" Name="tag02019F0F"/>
<Declaration External="true" Name="tag020290"/>
<Declaration External="true" Name="tag020293"/>
<Declaration External="true" Name="tag02029F4A"/>
<Declaration External="true" Name="tag020393"/>
<Declaration External="true" Name="tag02039F46"/>
<Declaration External="true" Name="tag02039F47"/>
<Declaration External="true" Name="tag02039F48"/>
<Declaration External="true" Name="tag02049F46"/>
<Declaration External="true" Name="tag02045A"/>
<Declaration External="true" Name="tag02045F24"/>
<Declaration External="true" Name="tag02049F07"/>
<Declaration External="true" Name="tag02048E"/>
<Declaration External="true" Name="tag02049F0D"/>
<Declaration External="true" Name="tag02049F0E"/>
<Declaration External="true" Name="tag02049F0F"/>
<Declaration External="true" Name="tag02045F28"/>

<Declaration External="true" Name="tag02055F25"/>
<Declaration External="true" Name="tag02058F"/>
<Declaration External="true" Name="tag020592"/>
<Declaration External="true" Name="tag02059F32"/>
<Declaration External="true" Name="tag02059F47"/>
<Declaration External="true" Name="tag02059F48"/>
<Declaration External="true" Name="tag02059F49"/>
<Declaration External="true" Name="tag02059F4A"/>
<Declaration External="true" Name="tag02059F74"/>
<Declaration External="true" Name="tag020593"/>

<Declaration External="true" Name="tag02069F4B"/>
<Declaration External="true" Name="tag02069F5D"/>
<Declaration External="true" Name="tag02069F46"/>
<Declaration External="true" Name="tag02069F47"/>
<Declaration External="true" Name="tag02069F48"/>

<Declaration External="true" Name="tag02075F34"/>

<Declaration External="true" Name="tag03015A"/>
<Declaration External="true" Name="tag03015F24"/>
<Declaration External="true" Name="tag03015F28"/>
<Declaration External="true" Name="tag03015F34"/>
<Declaration External="true" Name="tag03018E"/>
<Declaration External="true" Name="tag03019F07"/>
<Declaration External="true" Name="tag03019F0D"/>
<Declaration External="true" Name="tag03019F0E"/>
<Declaration External="true" Name="tag03018C"/>
<Declaration External="true" Name="tag03018D"/>
<Declaration External="true" Name="tag03015F30"/>
<Declaration External="true" Name="tag03019F08"/>
<Declaration External="true" Name="tag03019F42"/>
<Declaration External="true" Name="tag03019F49"/>
<Declaration External="true" Name="tag03019F63"/>

<Declaration External="true" Name="tag03025F30"/>
<Declaration External="true" Name="tag03028C"/>
<Declaration External="true" Name="tag03028D"/>
<Declaration External="true" Name="tag03029F08"/>
<Declaration External="true" Name="tag030290"/>
<Declaration External="true" Name="tag03029F32"/>
<Declaration External="true" Name="tag030292"/>
<Declaration External="true" Name="tag03025F25"/>

<Declaration External="true" Name="tag03039F46"/>
<Declaration External="true" Name="tag03039F74"/>
<Declaration External="true" Name="tag03038F"/>

<Declaration External="true" Name="tag030493"/>
<Declaration External="true" Name="tag03049F14"/>
<Declaration External="true" Name="tag03049F23"/>

<Declaration External="true" Name="tag0601"/>
<Declaration External="true" Name="tag06019F4B"/>
<Declaration External="true" Name="tag06019F5D"/>

<Declaration External="true" Name="tag04019F14"/>
<Declaration External="true" Name="tag04019F23"/>
<Declaration External="true" Name="tag0A018C"/>
<Declaration External="true" Name="tag0A018D"/>
<Declaration External="true" Name="tag0D019F58"/>
<Declaration External="true" Name="tag0D019F59"/>
<Declaration External="true" Name="tag0D019F5F"/>
<Declaration External="true" Name="tag0D019F53"/>
<Declaration External="true" Name="tag0D019F72"/>
<Declaration External="true" Name="tag0D019F54"/>
<Declaration External="true" Name="tag0D019F75"/>
<Declaration External="true" Name="tag0D019F73"/>
<Declaration External="true" Name="tag0D019F5C"/>
<Declaration External="true" Name="tag0D019F4F"/>
<Declaration External="true" Name="tag0D019F77"/>
<Declaration External="true" Name="tag0D019F78"/>
<Declaration External="true" Name="tag0D019F79"/>
<Declaration External="true" Name="tag0D019F6D"/>
<Declaration External="true" Name="tag0D019F6B"/>
<Declaration External="true" Name="tag0D019F68"/>
<Declaration External="true" Name="tag0D019F6C"/>
<Declaration External="true" Name="tag0D019F5D"/>

<Declaration External="true" Name="tag0E0157"/>
<Declaration External="true" Name="tag0E015F20"/>
<Declaration External="true" Name="tag0E015F34"/>
<Declaration External="true" Name="tag0E019F4F"/>
<Declaration External="true" Name="tag0E019F51"/>
<Declaration External="true" Name="tag0E019F52"/>
<Declaration External="true" Name="tag0E019F53"/>
<Declaration External="true" Name="tag0E019F54"/>
<Declaration External="true" Name="tag0E019F55"/>
<Declaration External="true" Name="tag0E019F56"/>
<Declaration External="true" Name="tag0E019F57"/>
<Declaration External="true" Name="tag0E019F36"/>
<Declaration External="true" Name="tag0E019F76"/>
<Declaration External="true" Name="tag0E019F5C"/>
<Declaration External="true" Name="tag0E019F5D"/>
<Declaration External="true" Name="tag0E019F68"/>
<Declaration External="true" Name="tag0E019F6B"/>
<Declaration External="true" Name="tag0E019F6C"/>
<Declaration External="true" Name="tag0E019F6D"/>
<Declaration External="true" Name="tag0E019F77"/>
<Declaration External="true" Name="tag0E019F78"/>
<Declaration External="true" Name="tag0E019F79"/>
<Declaration External="true" Name="tag910250"/>
<Declaration External="true" Name="tag91025F2D"/>
<Declaration External="true" Name="tag910287"/>
<Declaration External="true" Name="tag91029F38"/>
<Declaration External="true" Name="tag91029F4D"/>
<Declaration External="true" Name="tag9102A5"/>
<Declaration External="true" Name="tag9102BF0C"/>
<Declaration External="true" Name="tag91029F11"/>
<Declaration External="true" Name="tag91029F12"/>

<Declaration External="true" Name="tag910350"/>
<Declaration External="true" Name="tag91035F2D"/>
<Declaration External="true" Name="tag910387"/>
<Declaration External="true" Name="tag91039F38"/>
<Declaration External="true" Name="tag91039F4D"/>
<Declaration External="true" Name="tag9103A5"/>
<Declaration External="true" Name="tag9103BF0C"/>
<Declaration External="true" Name="tag91039F11"/>
<Declaration External="true" Name="tag91039F12"/>

<Declaration External="true" Name="tag910482"/>
<Declaration External="true" Name="tag910494"/>
<Declaration External="true" Name="tag92009F10"/>
<Declaration External="true" Name="tag920382"/>
<Declaration External="true" Name="tag920394"/>
<Declaration External="true" Name="tag920482"/>
<Declaration External="true" Name="tag920494"/>
<Declaration External="true" Name="tag920682"/>
<Declaration External="true" Name="tag920694"/>
<Declaration External="true" Name="tag920782"/>
<Declaration External="true" Name="tag920794"/>
<Declaration External="true" Name="tag92079F10"/>
<Declaration External="true" Name="tag920882"/>
<Declaration External="true" Name="tag920894"/>
<Declaration External="true" Name="tag0101"/>
<Declaration External="true" Name="tag0102"/>
<Declaration External="true" Name="tag0201"/>
<Declaration External="true" Name="tag0202"/>
<Declaration External="true" Name="tag0203"/>
<Declaration External="true" Name="tag0204"/>
<Declaration External="true" Name="tag0205"/>
<Declaration External="true" Name="tag0206"/>
<Declaration External="true" Name="tag0301"/>
<Declaration External="true" Name="tag0302"/>
<Declaration External="true" Name="tag0303"/>
<Declaration External="true" Name="tag0304"/>
<Declaration External="true" Name="tag0401"/>
<Declaration External="true" Name="tag0A01"/>
<Declaration External="true" Name="tag0D01"/>
<Declaration External="true" Name="tag0E01"/>
<Declaration External="true" Name="dgi8000"/>
<Declaration External="true" Name="dgi8101"/>
<Declaration External="true" Name="tag8102"/>
<Declaration External="true" Name="dgi8103"/>
<Declaration External="true" Name="tag8104"/>
<Declaration External="true" Name="tag8105"/>
<Declaration External="true" Name="tag8201"/>
<Declaration External="true" Name="tag8202"/>
<Declaration External="true" Name="tag8203"/>
<Declaration External="true" Name="tag8204"/>
<Declaration External="true" Name="tag8205"/>
<Declaration External="true" Name="dgi9000"/>
<Declaration External="true" Name="dgi9102"/>
<Declaration External="true" Name="tag9103"/>
<Declaration External="true" Name="dgi9104"/>
<Declaration External="true" Name="dgi9200"/>
<Declaration External="true" Name="tag9203"/>
<Declaration External="true" Name="tag9204"/>
<Declaration External="true" Name="tag9206"/>
<Declaration External="true" Name="tag9207"/>
<Declaration External="true" Name="tag9208"/>

<Declaration External="true" Name="tag00014F"/>
<Declaration External="true" Name="tag000150"/>
<Declaration External="true" Name="tag00019F12"/>
<Declaration External="true" Name="tag000187"/>
<Declaration External="true" Name="tag000173"/>
<Declaration External="true" Name="tag000161"/>
<Declaration External="true" Name="tag0001"/>
<Declaration External="true" Name="tag0002"/>
<Declaration External="true" Name="tag0002A5"/>
<Declaration External="true" Name="tag00025F2D"/>
<Declaration External="true" Name="tag000288"/>
<Declaration External="true" Name="tag00029F11"/>
<Declaration External="true" Name="tag0002BF0C"/>
<Declaration External="true" Name="tag00034F"/>
<Declaration External="true" Name="tag000350"/>
<Declaration External="true" Name="tag000387"/>
<Declaration External="true" Name="tag000361"/>
<Declaration External="true" Name="tag0003BF0C"/>
<Declaration External="true" Name="tag0003A5"/>
<Declaration External="true" Name="tag0003"/>
<Declaration External="true" Name="tag0006"/>
<Declaration External="true" Name="tag0006EF10"/>


		<Script><![CDATA[
		// Constants used in this fragment
			GPSystem.trace("this.data.dgi0006 1111: ");
		myObject = this.data;
		ZERO8 = new ByteString("0000000000000000", HEX);
		bbCPS = new ByteBuffer();
		bbHeader = new ByteBuffer();
		bbPDD1 = new ByteBuffer();
		bbPDD2 = new ByteBuffer();
		bbAPPL = new ByteBuffer();
		bbICC = new ByteBuffer();
		bbDGI = new ByteBuffer();
		bbOrder_1 = new ByteBuffer();
		bbOrder_2 = new ByteBuffer();
		bbEnc_1 = new ByteBuffer();
		
		//DP-SCRIPT-START
		bbDGI.clear();
		GPSystem.trace("this.data.dgi0006 1111: ");
		if(this.data.tag0006EF10 != ""){
			dataValue = this.data.tag0006EF10;
					GPSystem.trace("this.data.dgi0006 222: ");
			tlvBuffer = new TLV(0x82, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		
		}
			GPSystem.trace("this.data.tag0006EF10 : " + this.data.tag0006EF10);
		GPSystem.trace("this.data.dgi0006 : ");
		if (bbDGI != ""){
			dgi0006 = new TLV(0x0006, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0006.getTLV());
			GPSystem.trace("this.data.dgi0006 : " + dgi0006);
		}
		bbDGI.clear();
	
		if (this.data.tag00014F != "")
		{
			dataValue = this.data.tag00014F;
			tlvBuffer = new TLV(0x4F, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag000150 != "")
		{
			test = this.data.tag000150.toString();
			dataValue = new ByteString(test,0X03E8);
			 tlvBuffer = new TLV(0x50, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag00019F12 != "")
		{
			dataValue = new ByteString("4343422050424F43322E302043415244",HEX);
			tlvBuffer = new TLV(0x9F12, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag000187 != "")
		{
			dataValue = this.data.tag000187;
			tlvBuffer = new TLV(0x87, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		/*if (this.data.tag000173 != "")
		{
			dataValue = this.data.tag000173;
			tlvBuffer = new TLV(0x73, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}*/
		if (bbDGI != ""){
			tlvBuffer = new TLV(0x61, bbDGI.toByteString(), TLV.EMV);
			bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
				bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
			dgi0001 = new TLV(0x0001, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0001.getTLV());
			GPSystem.trace("dgi0001: " + dgi0001);
		}
		bbDGI.clear();
		//if (this.data.tag000288 != "")
		{
			
			dataValue = new ByteString("01",HEX);
			tlvBuffer = new TLV(0x88, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag00025F2D != "")
		{
			test = this.data.tag00025F2D.toString();
			dataValue = new ByteString(test,0X03E8);
			tlvBuffer = new TLV(0x5F2D, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag00029F11 != "")
		{
			dataValue = new ByteString("01",HEX);
			tlvBuffer = new TLV(0x9F11, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		/*if (this.data.tag0002BF0C != "")
		{
			dataValue = new ByteString("",HEX);
			tlvBuffer = new TLV(0xBF0C, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}*/
		if (bbDGI != ""){
				tlvBuffer = new TLV(0xA5, bbDGI.toByteString(), TLV.EMV);
			bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
			dgi0002 = new TLV(0x0002, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0002.getTLV());
			GPSystem.trace("dgi0002: " + dgi0002);
		}
		bbDGI.clear();
		if (this.data.tag00034F != "")
		{
			dataValue = this.data.tag00014F;
			tlvBuffer = new TLV(0x4F, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag000350 != "")
		{
			test = this.data.tag000150.toString();
			dataValue = new ByteString(test,0X03E8);
			 tlvBuffer = new TLV(0x50, dataValue, TLV.EMV);
	
			 bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag000387 != "")
		{
			dataValue = this.data.tag000187;
			tlvBuffer = new TLV(0x87, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}

		if (bbDGI != ""){
			tlvBuffer = new TLV(0x61, bbDGI.toByteString(), TLV.EMV);	
			bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
			 		
			tlvBuffer = new TLV(0xBF0C, bbDGI.toByteString(), TLV.EMV);	
			bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
			 		
			tlvBuffer = new TLV(0xA5, bbDGI.toByteString(), TLV.EMV);
			bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
			
			dgi0003 = new TLV(0x0003, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0003.getTLV());
			GPSystem.trace("dgi0003: " + dgi0003);
		}
		bbDGI.clear();

		if (this.data.tag910482 != "")
		{
			dataValue = this.data.tag910482;
			tlvBuffer = new TLV(0x82, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag910494 != "")
		{
			dataValue=new ByteString("08010100100103011007070018010400",HEX);
			tlvBuffer = new TLV(0x94, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi9104 = new TLV(0x9104, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi9104.getTLV());
			GPSystem.trace("dgi9104: " + dgi9104);
		}
		bbDGI.clear();
	
		if (this.data.tag010157 != "")
		{
		
	
			
			value = this.data.tag010157;
GPSystem.trace("value: " + value);

			valuetemp = value.deleteEightZero(value);
GPSystem.trace("valuetemp: " + valuetemp);
			if(valuetemp.length%2!=0){
				valuetemp=valuetemp+"46";
				valuetemp=new ByteString(valuetemp,HEX);
			}
	
			dataValue=valuetemp.hex2String(valuetemp);
GPSystem.trace("dataValue: " + dataValue);
			tlvBuffer = new TLV(0x57, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		
		if (this.data.tag01019F61 != "")
		{
			dataValue = this.data.tag01019F61;
			dataValue = dataValue.deleteEightZero(dataValue);
GPSystem.trace("01019F61: " + dataValue);

			tlvBuffer = new TLV(0x9F61, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag01019F62 != "")
		{
			dataValue = this.data.tag01019F62;
			tlvBuffer = new TLV(0x9F62, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag01015F20 != "")
		{
			/*dataValue = this.data.tag01015F20;
			tlvBuffer = new TLV(0x5F20, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
*/

			test = this.data.tag01015F20.toString();
			dataValue = new ByteString(test,0X03E8);
			 tlvBuffer = new TLV(0x5F20, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());

		}
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0101 = new TLV(0x0101, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0101.getTLV());
			GPSystem.trace("dgi0101: " + dgi0101);
		}
		bbDGI.clear();
		
		
if (this.data.tag02015F24 != "")
		{
			dataValue = this.data.tag02015F24;
			tlvBuffer = new TLV(0x5F24, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}

		if (this.data.tag02015A != "")
		{
			dataValue = this.data.tag02015A;
			tlvBuffer = new TLV(0x5A, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		
		
		if (this.data.tag02019F07 != "")
		{
			dataValue = this.data.tag02019F07;
			tlvBuffer = new TLV(0x9F07, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02018E != "")
		{
			dataValue = this.data.tag02018E;
			tlvBuffer = new TLV(0x8E, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02019F0D != "")
		{
			dataValue = this.data.tag02019F0D;
			tlvBuffer = new TLV(0x9F0D, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02019F0E != "")
		{
			dataValue = this.data.tag02019F0E;
			tlvBuffer = new TLV(0x9F0E, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02019F0F != "")
		{
			dataValue = this.data.tag02019F0F;
			tlvBuffer = new TLV(0x9F0F, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02015F28 != "")
		{
			dataValue = this.data.tag02015F28;
			tlvBuffer = new TLV(0x5F28, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0201 = new TLV(0x0201, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0201.getTLV());
			GPSystem.trace("dgi0201: " + dgi0201);
		}
		bbDGI.clear();
		if (this.data.tag020293 != "")
		{
			dataValue = this.data.tag020293;
			tlvBuffer = new TLV(0x93, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02029F4A != "")
		{
			dataValue = this.data.tag02029F4A;
			tlvBuffer = new TLV(0x9F4A, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0202 = new TLV(0x0202, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0202.getTLV());
			GPSystem.trace("dgi0202: " + dgi0202);
		}
		bbDGI.clear();
		if (this.data.tag02039F46 != "")
		{
			dataValue = this.data.tag02039F46;
			tlvBuffer = new TLV(0x9F46, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02039F47 != "")
		{
			dataValue = this.data.tag02039F47;
			tlvBuffer = new TLV(0x9F47, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02039F48 != "")
		{
			dataValue = this.data.tag02039F48;
			tlvBuffer = new TLV(0x9F48, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0203 = new TLV(0x0203, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0203.getTLV());
			GPSystem.trace("dgi0203: " + dgi0203);
		}
		bbDGI.clear();
		if (this.data.tag02045F24 != "")
		{
			dataValue = this.data.tag02045F24;
			tlvBuffer = new TLV(0x5F24, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}

		if (this.data.tag02045A != "")
		{
			dataValue = this.data.tag02045A;
			tlvBuffer = new TLV(0x5A, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		
		if (this.data.tag02049F07 != "")
		{
			dataValue = this.data.tag02049F07;
			tlvBuffer = new TLV(0x9F07, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02048E != "")
		{
			dataValue = this.data.tag02048E;
			tlvBuffer = new TLV(0x8E, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02049F0D != "")
		{
			dataValue = this.data.tag02049F0D;
			tlvBuffer = new TLV(0x9F0D, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02049F0E != "")
		{
			dataValue = this.data.tag02049F0E;
			tlvBuffer = new TLV(0x9F0E, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02049F0F != "")
		{
			dataValue = this.data.tag02049F0F;
			tlvBuffer = new TLV(0x9F0F, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02045F28 != "")
		{
			dataValue = this.data.tag02045F28;
			tlvBuffer = new TLV(0x5F28, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0204 = new TLV(0x0204, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0204.getTLV());
			GPSystem.trace("dgi0204: " + dgi0204);
		}
		bbDGI.clear();
		if (this.data.tag020593 != "")
		{
			dataValue = this.data.tag020593;
			tlvBuffer = new TLV(0x93, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02059F4A != "")
		{
			dataValue = this.data.tag02059F4A;
			tlvBuffer = new TLV(0x9F4A, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02059F74 != "")
		{
			test = this.data.tag02059F74.toString();
			dataValue = new ByteString(test,0X03E8);
			GPSystem.trace("02059F74: " + dataValue);
			tlvBuffer = new TLV(0x9F74, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0205 = new TLV(0x0205, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0205.getTLV());
			GPSystem.trace("dgi0205: " + dgi0205);
		}
		bbDGI.clear();
		
		if (this.data.tag02069F46 != "")
		{
			dataValue = this.data.tag02069F46;
			tlvBuffer = new TLV(0x9F46, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02069F47 != "")
		{
			dataValue = this.data.tag02069F47;
			tlvBuffer = new TLV(0x9F47, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag02069F48 != "")
		{
			dataValue = this.data.tag02069F48;
			tlvBuffer = new TLV(0x9F48, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0206 = new TLV(0x0206, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0206.getTLV());
			GPSystem.trace("dgi0206: " + dgi0206);
		}
		bbDGI.clear();
		if (this.data.tag02075F34 != "")
		{
			dataValue = this.data.tag02075F34;
			tlvBuffer = new TLV(0x5F34, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0207 = new TLV(0x0207, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0207.getTLV());
			GPSystem.trace("dgi0207: " + dgi0207);
		}
		bbDGI.clear();
		if (this.data.tag03018C != "")
		{
			dataValue = this.data.tag03018C;
			tlvBuffer = new TLV(0x8C, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag03018D != "")
		{
			dataValue = this.data.tag03018D;
			tlvBuffer = new TLV(0x8D, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag03015F30 != "")
		{
			dataValue = this.data.tag03015F30;
			tlvBuffer = new TLV(0x5F30, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag03019F08 != "")
		{
			dataValue = this.data.tag03019F08;
			tlvBuffer = new TLV(0x9F08, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		
		if (this.data.tag03019F42 != "")
		{
			dataValue = this.data.tag03019F42;
			tlvBuffer = new TLV(0x9F42, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag03019F49 != "")
		{
			dataValue = this.data.tag03019F49;
			tlvBuffer = new TLV(0x9F49, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag03019F63 != "")
		{
			dataValue = this.data.tag03019F63;
			tlvBuffer = new TLV(0x9F63, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0301 = new TLV(0x0301, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0301.getTLV());
			GPSystem.trace("dgi0301: " + dgi0301);
		}
		bbDGI.clear();
		if (this.data.tag030290 != "")
		{
			dataValue = this.data.tag030290;
			tlvBuffer = new TLV(0x90, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag03029F32 != "")
		{
			dataValue = this.data.tag03029F32;
			tlvBuffer = new TLV(0x9F32, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag030292 != "")
		{
			dataValue = this.data.tag030292;
			tlvBuffer = new TLV(0x92, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag03025F25 != "")
		{
			dataValue = this.data.tag03025F25;
			tlvBuffer = new TLV(0x5F25, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0302 = new TLV(0x0302, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0302.getTLV());
			GPSystem.trace("dgi0302: " + dgi0302);
		}
		bbDGI.clear();
		if (this.data.tag03038F != "")
		{
			dataValue = this.data.tag03038F;
			tlvBuffer = new TLV(0x8F, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		/*if (this.data.tag03039F74 != "")
		{
	
			//dataValue = this.data.tag03039F74;
			//GPSystem.trace("dgi9f74: " + this.data.tag03039F74);
			test = this.data.tag03039F74.toString();
			dataValue = new ByteString(test,0X03EA);
			GPSystem.trace("XXXX: " + dataValue);
			tlvBuffer = new TLV(0x9F74, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}*/
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0303 = new TLV(0x0303, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0303.getTLV());
			GPSystem.trace("dgi0303: " + dgi0303);
		}
		bbDGI.clear();
		if (this.data.tag03049F14 != "")
		{
			dataValue = this.data.tag03049F14;
			tlvBuffer = new TLV(0x9F14, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag03049F23 != "")
		{
			dataValue = this.data.tag03049F23;
			tlvBuffer = new TLV(0x9F23, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
			tlvBuffer = new TLV(0x70, bbDGI.toByteString(), TLV.EMV);
		bbDGI.clear();
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi0304 = new TLV(0x0304, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0304.getTLV());
			GPSystem.trace("dgi0304: " + dgi0304);
		}
		bbDGI.clear();
		
		if (this.data.tag0D019F58 != "")
		{
			dataValue = this.data.tag0D019F58;
			tlvBuffer = new TLV(0x9F58, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F59 != "")
		{
			dataValue = this.data.tag0D019F59;
			tlvBuffer = new TLV(0x9F59, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F53 != "")
		{
			dataValue = this.data.tag0D019F53;
			tlvBuffer = new TLV(0x9F53, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F72 != "")
		{
			dataValue = this.data.tag0D019F72;
			tlvBuffer = new TLV(0x9F72, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F54 != "")
		{
			dataValue = this.data.tag0D019F54;
			tlvBuffer = new TLV(0x9F54, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F75 != "")
		{
			dataValue = this.data.tag0D019F75;
			tlvBuffer = new TLV(0x9F75, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F73 != "")
		{
			dataValue = this.data.tag0D019F73;
			tlvBuffer = new TLV(0x9F73, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F5C != "")
		{
			dataValue = this.data.tag0D019F5C;
			tlvBuffer = new TLV(0x9F5C, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F4F != "")
		{
			dataValue = this.data.tag0D019F4F;
			tlvBuffer = new TLV(0x9F4F, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F77 != "")
		{
			dataValue = this.data.tag0D019F77;
			tlvBuffer = new TLV(0x9F77, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F78 != "")
		{
			dataValue = this.data.tag0D019F78;
			tlvBuffer = new TLV(0x9F78, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag0D019F79 != "")
		{
			dataValue = new ByteString("000000000000", HEX);
			tlvBuffer = new TLV(0x9F79, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F6D != "")
		{
			dataValue = this.data.tag0D019F6D;
			tlvBuffer = new TLV(0x9F6D, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F6B != "")
		{
			dataValue = this.data.tag0D019F6B;
			tlvBuffer = new TLV(0x9F6B, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F68 != "")
		{
			dataValue = this.data.tag0D019F68;
			tlvBuffer = new TLV(0x9F68, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F6C != "")
		{
			dataValue = this.data.tag0D019F6C;
			tlvBuffer = new TLV(0x9F6C, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0D019F5D != "")
		{
			dataValue = this.data.tag0D019F5D;
			tlvBuffer = new TLV(0x9F5D, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		
		if (bbDGI != ""){
			dgi0D01 = new TLV(0x0D01, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0D01.getTLV());
			GPSystem.trace("dgi0D01: " + dgi0D01);
		}
		bbDGI.clear();
		
		
		if (this.data.tag0E019F51 != "")
		{
			dataValue = this.data.tag0E019F51;
			tlvBuffer = new TLV(0x9F51, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0E019F52 != "")
		{
			dataValue = this.data.tag0E019F52;
			tlvBuffer = new TLV(0x9F52, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0E019F56 != "")
		{
			dataValue = this.data.tag0E019F56;
			tlvBuffer = new TLV(0x9F56, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag0E019F55 != "")
		{
			dataValue = new ByteString("C0", HEX);
			tlvBuffer = new TLV(0x9F55, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0E019F57 != "")
		{
			dataValue = this.data.tag0E019F57;
			tlvBuffer = new TLV(0x9F57, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0E019F76 != "")
		{
			dataValue = this.data.tag0E019F76;
			tlvBuffer = new TLV(0x9F76, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		
		if (this.data.tag0E0157 != "")
		{
		
			
			value = this.data.tag0E0157;
			valuetemp = value.deleteEightZero(value);
			if(valuetemp.length%2!=0){
				valuetemp=valuetemp+"46";
				valuetemp=new ByteString(valuetemp,HEX);
			}
		
			dataValue=valuetemp.hex2String(valuetemp);
			tlvBuffer = new TLV(0x57, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
			
			
		}
		
		if (this.data.tag0E015F20 != "")
		{
			/*dataValue = this.data.tag0E015F20;
			tlvBuffer = new TLV(0x5F20, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
*/
			test = this.data.tag0E015F20.toString();
			dataValue = new ByteString(test,0X03E8);
			 tlvBuffer = new TLV(0x5F20, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());

		}
		if (this.data.tag0E019F36 != "")
		{
			dataValue = this.data.tag0E019F36;
			tlvBuffer = new TLV(0x9F36, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag0E015F34 != "")
		{
			dataValue = this.data.tag0E015F34;
			tlvBuffer = new TLV(0x5F34, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		
		if (bbDGI != ""){
			dgi0E01 = new TLV(0x0E01, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi0E01.getTLV());
			GPSystem.trace("dgi0E01: " + dgi0E01);
		}
		bbDGI.clear();
		if (this.data.dgi8000 != "")
		{
			dataValue = this.data.dgi8000;
			GPSystem.trace("dgi8000: "+dataValue );
			//dataValue = this.crypto.encrypt(key.KEK,this.crypto.DES_ECB,dataValue);
			dgi8000 = new TLV(0x8000,dataValue, TLV.DGI);
			bbICC.append(dgi8000.getTLV());               
		}
		bbDGI.clear();
		/*if (this.data.dgi8101 != "")
		{
			dataValue = this.data.dgi8101;
			GPSystem.trace("dgi8101: "+dataValue );
			
			dgi8101 = new TLV(0x8101,dataValue, TLV.DGI);
			bbICC.append(dgi8101.getTLV());               
		}
		bbDGI.clear();
		if (this.data.dgi8102 != "")
		{
			dataValue = this.data.dgi8102;
			GPSystem.trace("dgi8102: "+dataValue );
		
			dgi8102 = new TLV(0x8102,dataValue, TLV.DGI);
			bbICC.append(dgi8102.getTLV());               
		}
		bbDGI.clear();*/
		/*if (this.data.dgi8103 != "")
		{
			dataValue = this.data.dgi8103;
			GPSystem.trace("dgi8103: "+dataValue );
		
			dgi8103 = new TLV(0x8103,dataValue, TLV.DGI);
			bbICC.append(dgi8103.getTLV());               
		}
		bbDGI.clear();
		if (this.data.dgi8104 != "")
		{
			dataValue = this.data.dgi8104;
			GPSystem.trace("dgi8104: "+dataValue );
		//	dataValue = this.crypto.encrypt(key.KEK,this.crypto.DES_ECB,dataValue);
			dgi8104 = new TLV(0x8104,dataValue, TLV.DGI);
			bbICC.append(dgi8104.getTLV());               
		}
		bbDGI.clear();
		if (this.data.dgi8105 != "")
		{
			dataValue = this.data.dgi8105;
			GPSystem.trace("dgi8105: "+dataValue );
		//	dataValue = this.crypto.encrypt(key.KEK,this.crypto.DES_ECB,dataValue);
			dgi8105 = new TLV(0x8105,dataValue, TLV.DGI);
			bbICC.append(dgi8105.getTLV());               
		}
		bbDGI.clear();*/
		if (this.data.dgi8201 != "")
		{
			test = this.data.dgi8201;
			dataValue = test.deleteEightZero(test);	
			dataLeft = dataValue.left(1);
			if(dataLeft == "00"){
				dataValue = dataValue.right(dataValue.length-1);
			}
		//	dataValue = this.crypto.encrypt(key.KEK,this.crypto.DES_ECB,dataValue);
			GPSystem.trace("dgi8201: "+dataValue );
			dgi8201 = new TLV(0x8201,dataValue, TLV.DGI);
			bbICC.append(dgi8201.getTLV());               
		}
		bbDGI.clear();
		if (this.data.dgi8202 != "")
		{
			test = this.data.dgi8202;
			dataValue = test.deleteEightZero(test);
			dataLeft = dataValue.left(1);
			if(dataLeft == "00"){
				dataValue = dataValue.right(dataValue.length-1);
			}
		//	dataValue = this.crypto.encrypt(key.KEK,this.crypto.DES_ECB,dataValue);
			GPSystem.trace("dgi8202: "+dataValue );
			dgi8202 = new TLV(0x8202,dataValue, TLV.DGI);
			bbICC.append(dgi8202.getTLV());               
		}
		bbDGI.clear();
		if (this.data.dgi8203 != "")
		{
			test = this.data.dgi8203;
			dataValue = test.deleteEightZero(test);		
			dataLeft = dataValue.left(1);
			if(dataLeft == "00"){
				dataValue = dataValue.right(dataValue.length-1);
			}
			//dataValue = this.crypto.encrypt(key.KEK,this.crypto.DES_ECB,dataValue);
			GPSystem.trace("dgi8203: "+dataValue );
			dgi8203 = new TLV(0x8203,dataValue, TLV.DGI);
			bbICC.append(dgi8203.getTLV());               
		}
		bbDGI.clear();
		if (this.data.dgi8204 != "")
		{
			test = this.data.dgi8204;
			dataValue = test.deleteEightZero(test);
			
			dataLeft = dataValue.left(1);
			if(dataLeft == "00"){
				dataValue = dataValue.right(dataValue.length-1);
			}
		//	dataValue = this.crypto.encrypt(key.KEK,this.crypto.DES_ECB,dataValue);
			GPSystem.trace("dgi8204: "+dataValue );
			dgi8204 = new TLV(0x8204,dataValue, TLV.DGI);
			bbICC.append(dgi8204.getTLV());               
		}
		bbDGI.clear();
		if (this.data.dgi8205 != "")
		{
			test = this.data.dgi8205;
			dataValue = test.deleteEightZero(test);
			
			dataLeft = dataValue.left(1);
			if(dataLeft == "00"){
				dataValue = dataValue.right(dataValue.length-1);
			}
		//	dataValue = this.crypto.encrypt(key.KEK,this.crypto.DES_ECB,dataValue);
			GPSystem.trace("dgi8205: "+dataValue );
			dgi8205 = new TLV(0x8205,dataValue, TLV.DGI);
			bbICC.append(dgi8205.getTLV());               
		}
		bbDGI.clear();
		/*if (this.data.dgi8010 != "")
		{
			dataValue = this.data.dgi8010;
			bbDGI.append(dataValue);
		}
		if (bbDGI != ""){
			dgi8010 = new TLV(0x8010, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi8010.getTLV());
			GPSystem.trace("dgi8010: " + dgi8010);
		}
		bbDGI.clear();*/
		if (this.data.dgi9000 != "")
		{
			dataValue = this.data.dgi9000;
			bbDGI.append(dataValue);
		}
		if (bbDGI != ""){
			dgi9000 = new TLV(0x9000, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi9000.getTLV());
			GPSystem.trace("dgi9000: " + dgi9000);
		}
		bbDGI.clear();
		/*if (this.data.dgi9010 != "")
		{
			dataValue = this.data.dgi9010;
			bbDGI.append(dataValue);
		}
		if (bbDGI != ""){
			dgi9010 = new TLV(0x9010, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi9010.getTLV());
			GPSystem.trace("dgi9010: " + dgi9010);
		}
		bbDGI.clear();*/
		
		//
		if (this.data.tag910250 != "")
		{
			test = this.data.tag910250.toString();
			dataValue = new ByteString(test,0X03E8);
			 tlvBuffer = new TLV(0x50, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag910287 != "")
		{
			 dataValue = this.data.tag910287;
			 tlvBuffer = new TLV(0x87, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		
		if (this.data.tag91029F38 != "")
		{
			 dataValue = this.data.tag91029F38;
			 tlvBuffer = new TLV(0x9F38, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag91025F2D != "")
		{
			 //dataValue = this.data.tag91025F2D;
			test = this.data.tag91025F2D.toString();
			dataValue = new ByteString(test,0X03E8);
			//dataValue = new ByteString(test,0X03E8);
			 tlvBuffer = new TLV(0x5F2D, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag91029F11 != "")
		{
			 dataValue = new ByteString("01",HEX);
			 tlvBuffer = new TLV(0x9F11, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag91029F12 != "")
		{
			 dataValue = new ByteString("4343422050424F43322E302043415244",HEX);
			 tlvBuffer = new TLV(0x9F12, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag91029F4D != "")
		{
			dataValue = this.data.tag91029F4D;
			tlvBuffer = new TLV(0x9F4D, dataValue, TLV.EMV);
			tlvBuffer = new TLV(0xBF0C, tlvBuffer.getTLV(), TLV.EMV);	   
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
				tlvBuffer = new TLV(0xA5, bbDGI.toByteString(), TLV.EMV);
				bbDGI.clear();
				bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi9102 = new TLV(0x9102, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi9102.getTLV());
			GPSystem.trace("dgi9102: " + dgi9102);
		}
		bbDGI.clear();
		
		
		if (this.data.tag910350 != "")
		{
			test = this.data.tag910350.toString();
			dataValue = new ByteString(test,0X03E8);
			 tlvBuffer = new TLV(0x50, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag910387 != "")
		{
			 dataValue = this.data.tag910387;
			 tlvBuffer = new TLV(0x87, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag91039F38 != "")
		{
			 dataValue = this.data.tag91039F38;
			 tlvBuffer = new TLV(0x9F38, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag91035F2D != "")
		{
			// dataValue = this.data.tag91035F2D;
			test = this.data.tag91035F2D.toString();
			dataValue = new ByteString(test,0X03E8);
			//dataValue = new ByteString(test,0X03E8);
			 tlvBuffer = new TLV(0x5F2D, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag91039F11 != "")
		{
			 dataValue = new ByteString("01",HEX);
			 tlvBuffer = new TLV(0x9F11, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag91039F12 != "")
		{
			 dataValue = new ByteString("4343422050424F43322E302043415244",HEX);
			 tlvBuffer = new TLV(0x9F12, dataValue, TLV.EMV);
			 bbDGI.append(tlvBuffer.getTLV());
		}
		
		if (this.data.tag91039F4D != "")
		{
			dataValue = this.data.tag91039F4D;
			tlvBuffer = new TLV(0x9F4D, dataValue, TLV.EMV);
			tlvBuffer = new TLV(0xBF0C, tlvBuffer.getTLV(), TLV.EMV);	   
			bbDGI.append(tlvBuffer.getTLV());
		}
		{
				tlvBuffer = new TLV(0xA5, bbDGI.toByteString(), TLV.EMV);
				bbDGI.clear();
				bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi9103 = new TLV(0x9103, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi9103.getTLV());
			GPSystem.trace("dgi9103: " + dgi9103);
		}

		bbDGI.clear();
		if (this.data.tag92009F10 != "")
		{
			dataValue = this.data.tag92009F10;
			tlvBuffer = new TLV(0x9F10, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi9200 = new TLV(0x9200, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi9200.getTLV());
			GPSystem.trace("dgi9200: " + dgi9200);
		}
		bbDGI.clear();
		/*if (this.data.tag910482 != "")
		{
			dataValue = this.data.tag910482;
			tlvBuffer = new TLV(0x82, dataValue, TLV.EMV);   
			bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag910494 != "")
		{
			dataValue = new ByteString("08010100100103011007070018010400",HEX);
			tlvBuffer = new TLV(0x94, dataValue, TLV.EMV);   
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi9104 = new TLV(0x9104, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi9104.getTLV());
			GPSystem.trace("dgi9104: " + dgi9104);
		}
		bbDGI.clear();*/
		if (this.data.tag920382 != "")
		{
			dataValue = this.data.tag920382;
			tlvBuffer = new TLV(0x82, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag920394 != "")
		{
			
			dataValue=new ByteString("080101001004070118010300",HEX);
			tlvBuffer = new TLV(0x94, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi9203 = new TLV(0x9203, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi9203.getTLV());
			GPSystem.trace("dgi9203: " + dgi9203);
		}
		bbDGI.clear();
		
		if (this.data.tag920782 != "")
		{
			dataValue = this.data.tag920782;
			tlvBuffer = new TLV(0x82, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		//if (this.data.tag920794 != "")
		{
			dataValue=new ByteString("100406013001010018020300",HEX);
			tlvBuffer = new TLV(0x94, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (this.data.tag92079F10 != "")
		{
			dataValue = this.data.tag92079F10;
			tlvBuffer = new TLV(0x9F10, dataValue, TLV.EMV);
			bbDGI.append(tlvBuffer.getTLV());
		}
		if (bbDGI != ""){
			dgi9207 = new TLV(0x9207, bbDGI.toByteString(), TLV.DGI);
			bbICC.append(dgi9207.getTLV());
			GPSystem.trace("dgi9207: " + dgi9207);
		}
		
                      //DP-SCRIPT-END		

		// DUMP assembled data to output variable
		myObject.CPS_Output = bbICC.toByteString();		
		]]></Script>
	</ScriptFragment>	
	
	<ScriptFragment Active="true" EndLifeCycle="postPersoPrep" Name="Template Data" StartLifeCycle="prePersoPrep">
		<Script><![CDATA[
//DP-SCRIPT-START










































































































































































































































































































































































		








































































































































































































































































































































































//DP-SCRIPT-END]]></Script>
	</ScriptFragment>		
	
		<ScriptFragment Active="true" EndLifeCycle="PERSONALIZED" Name="DELETEAPP" StartLifeCycle="post_PersoPrep">
		<Script><![CDATA[
				NO_SECUREITY_LEVEL=0x00;
				MACONLY= 0x01;
				MACENC = 0x03;

				CLA    = 0x80;
				CLASEC = 0x84;

				INS_SelectApplication    = 0xA4;
				INS_Install              = 0xE6;
				INS_InitializeUpdate     = 0x50;
				INS_ExternalAuthenticate = 0x82;
				INS_AppendRecord         = 0xE2;
				INS_PutData              = 0xDA;
				INS_PutKey               = 0xD8;
				INS_ChangePin            = 0x24;
				INS_EndPersonalization    =  0xF0;

				P1 = 0x00;
				P2 = 0x00;

				MyObject=this.data;
				MyKey=this.key;

				GPSystem.trace("The Following is the process of deleteApp");
				GPSystem.trace("current time is: "+ GPSystem.dateTimeByteString().toString());

			//1.Select the Application
				//GP Selecting VSDC Application
				this.securityDomain.select();

		 	//2. card resetto delete the AID
				strATR=this.card.reset(0x05);
				out.println(strATR);

			//3.intializeUpdate and externalAuthenticate,execute the SecureChannel scriptFragment
				this.openSecureChannel(NO_SECUREITY_LEVEL,false);

			//4. delete the AID
				AID=new ByteString("A0000000031010",HEX);
				resp=this.securityDomain.deleteAID(AID,0x9000);

		]]></Script>
	</ScriptFragment>
	
	<ScriptFragment Active="true" EndLifeCycle="PERSONALIZED" Name="ERASE" StartLifeCycle="post_PersoPrep">
		<Script><![CDATA[		

			MyObject=this.data;
				MyKey=this.key;
 				//0 native 
				this.card.reset(0x05);
		    	  //this.appDel(0x01,0x02);
			

		]]></Script>
	</ScriptFragment>
	
	<ScriptFragment Active="true" EndLifeCycle="PERSONALIZED" Name="INSTALL" StartLifeCycle="post_PersoPrep">
		<Script><![CDATA[
				NO_SECUREITY_LEVEL=0x00;
				MACONLY= 0x01;
				MACENC = 0x03;

				CLA    = 0x80;
				CLASEC = 0x84;

				INS_SelectApplication    = 0xA4;
				INS_Install              = 0xE6;
				INS_InitializeUpdate     = 0x50;
				INS_ExternalAuthenticate = 0x82;
				INS_AppendRecord         = 0xE2;
				INS_PutData              = 0xDA;
				INS_PutKey               = 0xD8;
				INS_ChangePin            = 0x24;
				INS_EndPersonalization    =  0xF0;

				P1 = 0x00;
				P2 = 0x00;

				myObject=this.data;
				MyKey=this.key;

				GPSystem.trace("The Following is the process of installApp");
				GPSystem.trace("current time is: "+ GPSystem.dateTimeByteString().toString());
				
			//1.Power on (Card Manager selected by default) Install VSDC application
	 		    this.openSecureChannel(NO_SECUREITY_LEVEL,false);

            //2.GP Install application
                execLFAID = new ByteString("A00000000310",HEX);
                execModAID = new ByteString("A0000000031010",HEX);
                appInsAID  = new ByteString("A0000000031010",HEX);
                privileges  = new ByteString("10",HEX);

				watchObject=GPSystem.getVendorObject("GPSupport");

				//////////////////////////////////////////////////////////////////////////////////////////////////////////
			// tag for PDI data (PDI2) e.g. EF82 
	
			CPS_Output=myObject.CPS_Output;
			GPSystem.trace("cps output: " + CPS_Output);
			
				GPSystem.trace("cps output length: " + CPS_Output.length);
			//	GPSystem.trace("cps output getL length: " + CPS_Output.getL(TLV.L16));
				
			has0702=false;
			has0703=false;
			has0B01=false;
							
			while(CPS_Output.length>0){
	 			tagPDI = CPS_Output.left(2);

				CPS_Output = CPS_Output.right(CPS_Output.length - 2);
				
				GPSystem.trace("tagPDI : " + tagPDI );	
				GPSystem.trace("cps output: " + CPS_Output);				
				
				// length of ICC data(PDI data) e.g. 0248
	 			lICC = CPS_Output.left(1);
				CPS_Output = CPS_Output.right(CPS_Output.length - 1);
								
				GPSystem.trace("lICC : " + lICC );
				IccData = CPS_Output.left(lICC.toUnsigned());
				
				if(tagPDI=="0702"){
					has0702=true;
					value0702=IccData;
				}	
				if(tagPDI=="0703"){
					has0703=true;
					value0703=IccData;
				}			
				if(tagPDI=="0B01"){
					has0B01=true;
					value0B01=IccData;
				}			
				CPS_Output = CPS_Output.right(CPS_Output.length - lICC.toUnsigned());
				//appendRecord(tagPDI,IccData);
			}
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////				
                //prepare data according to the database(whether support VLP)
                installBuffer = new ByteBuffer();
                L_VSDC_AFL=new ByteString();
                VSDC_AFL=new ByteString();
                
                if(has0702)
                { 
                    TlvList0702 = new TLVList(value0702,TLV.EMV);  //TLV
                    L_VSDC_AFL=TlvList0702.find(0x94).getL();
                    VSDC_AFL=TlvList0702.find(0x94).getValue();
                    
                }
				//TagOfVLP=watchObject.checkVLP(); //just check dgi0B01
				TagOfVLP=(has0703&&has0B01);  //have dgi0B01 and dgi0703
				if(TagOfVLP==false){
	                GPSystem.trace("No VLP data in database");
	                installBuffer.append("C9").append(L_VSDC_AFL).append(VSDC_AFL);
				}
                installParam=installBuffer.toByteString();

				installToken =new ByteString(); //null
				this.securityDomain.installForInstallAndSelectable(execLFAID,execModAID,appInsAID,privileges,installParam,installToken,0x9000);

            //3.Put Data ,to place the Issuer Identification Number(IIN) in the Card Manager,IIN length is 4.

                IIN = new ByteString("11223344",HEX);
                Tag=0x42;	

                this.sendApdu(CLA, INS_PutData, 0x00, Tag, IIN);  
                //4.Get Data
            	out.println(this.getData(0x42,0x9000));

                out.println(this.card.SW);
                out.println(this.card.SW1);
                out.println(this.card.SW2);
            
            //5.Get Status
            	status=this.getStatus(APPS_ONLY,new ByteString("4F00",HEX),false,0x9000);
            	out.println("Card Status="+status);

		]]></Script>
	</ScriptFragment>


	
	<ScriptFragment Active="true" EndLifeCycle="PERSONALIZED" Name="PERSONALIZE" StartLifeCycle="post_PersoPrep">
		<Declaration Name="AID"/>
		<Declaration Name="CSN"/>
		<Declaration Name="issuerIIN"/>
		<Declaration Name="dgi0000"/>

		<Key Name="key0" ProfileID="00112233440000000004"/>

		<Script><![CDATA[
                      // Constants used in this fragment
		      NO_SECUREITY_LEVEL=0x00;
		      MACONLY= 0x01;
		      MACENC = 0x03;

		      CLA    = 0x80;
		      CLASEC = 0x84;

		      INS_SelectApplication    = 0xA4;
		      INS_Install    = 0xE6;

		      INS_InitializeUpdate     = 0x50;
		      INS_ExternalAuthenticate = 0x82;
		      INS_AppendRecord         = 0xE2;
		      INS_PutData    = 0xDA;
		      INS_PutKey     = 0xD8;
		      INS_ChangePin  = 0x24;

		      INS_EndPersonalization    =  0xF0;

		      P1 = 0x00;
		      P2 = 0x00;

		      myObject=this.data;
		      myKey=this.key;
		     // this.nativeDel(myObject,myKey);
			  
			  
			  CPS_Output=myObject.CPS_Output;
 GPSystem.trace("111111111111111 ");	
		 
			while(CPS_Output.length>0){
	 			tagPDI = CPS_Output.left(2);
	 			 GPSystem.trace("tagPDI: "+tagPDI);	
				CPS_Output = CPS_Output.right(CPS_Output.length - 2);
	 			lICC = CPS_Output.left(1);
				CPS_Output = CPS_Output.right(CPS_Output.length - 1);
				IccData = CPS_Output.left(lICC.toUnsigned());		
					 			 GPSystem.trace("IccData: "+IccData);	
				CPS_Output = CPS_Output.right(CPS_Output.length - lICC.toUnsigned());
				 GPSystem.trace("CPS_Output: "+CPS_Output);	
				if(tagPDI=="0006"){
 					 dgi = new ByteBuffer();
					 //dgi.append(tagPDI);
					 //dgi.append(lICC);
					 dgi.append(IccData);
					 dgi.append("80");
					dataValue = dgi.toByteString().right(dgi.toByteString().length-2);
						 GPSystem.trace("dataValue: "+dataValue);	
					DES = 0x80
				
					this.key["KMU"].setComponent(DES,dataValue.bytes(0,16));
				}
			}
			   GPSystem.trace("222222222222222 ");	
		   	allPutKey(myKey,myObject);
			
			
			CPS_Output=myObject.CPS_Output;
		CPS_Output_ppse = myObject.CPS_Output;
		CPS_Output_pse = myObject.CPS_Output;

		
		//ppse
		this.securityDomain.select("325041592E5359532E4444463031");	
		 this.openSecureChannel(NO_SECUREITY_LEVEL);  
		while(CPS_Output_ppse.length>0){


	 			tagPDI = CPS_Output_ppse.left(2);
				CPS_Output_ppse = CPS_Output_ppse.right(CPS_Output_ppse.length - 2);				
								
	 			lICC = CPS_Output_ppse.left(1);
				CPS_Output_ppse = CPS_Output_ppse.right(CPS_Output_ppse.length - 1);
								
			
				IccData = CPS_Output_ppse.left(lICC.toUnsigned());
				
				CPS_Output_ppse = CPS_Output_ppse.right(CPS_Output_ppse.length - lICC.toUnsigned());
			
	      if(tagPDI=="0003"){	
	     
						 dgi = new ByteBuffer();
					 dgi.append(new ByteString("9102",HEX));
					 dgi.append(lICC);
					 dgi.append(IccData);		
					 GPSystem.trace("PPSE : " + IccData);	
					 endPersonalization(dgi.toByteString());
				}
				}
				
			//pse
			 this.securityDomain.select("315041592E5359532E4444463031");
			 this.openSecureChannel(NO_SECUREITY_LEVEL); 
			while(CPS_Output_pse.length>0){
	 			tagPDI = CPS_Output_pse.left(2);

				CPS_Output_pse = CPS_Output_pse.right(CPS_Output_pse.length - 2);

				// length of ICC data(PDI data) e.g. 0248
	 			lICC = CPS_Output_pse.left(1);
				CPS_Output_pse = CPS_Output_pse.right(CPS_Output_pse.length - 1);
								
				
				IccData = CPS_Output_pse.left(lICC.toUnsigned());
				
				CPS_Output_pse = CPS_Output_pse.right(CPS_Output_pse.length - lICC.toUnsigned());
			
	    		 if(tagPDI=="0001"){	
	        
					
							 GPSystem.trace("PSE0101: " + IccData);	
							appendRecord("0101",lICC,IccData);

						}else if(tagPDI=="0002"){	
				 
						 	 dgi = new ByteBuffer();
							 dgi.append(new ByteString("9102",HEX));
							 dgi.append(lICC);
							 dgi.append(IccData);	
 							GPSystem.trace("PSE9102 : " + IccData);	
							endPersonalization(dgi.toByteString());

					}	
				}
		
		    //pse ppse personalize
		      //psePersonal(myKey,myObject);
		      
		       		//1. Select application
	 	   this.securityDomain.select("A0000003330101");	 	  
			//2. Open secure channel
		      this.openSecureChannel(NO_SECUREITY_LEVEL);
		      
		      

	      		
		CPS_Output=myObject.CPS_Output;

		GPSystem.trace("cps output: " + myObject.CPS_Output);
			while(CPS_Output.length>0){
	 			tagPDI = CPS_Output.left(2);

				CPS_Output = CPS_Output.right(CPS_Output.length - 2);
				
				GPSystem.trace("tagPDI : " + tagPDI );	
				//GPSystem.trace("cps output: " + CPS_Output);				
				
				// length of ICC data(PDI data) e.g. 0248
	 			lICC = CPS_Output.left(1);
				CPS_Output = CPS_Output.right(CPS_Output.length - 1);
								
				GPSystem.trace("lICC : " + lICC );
				IccData = CPS_Output.left(lICC.toUnsigned());
				
				CPS_Output = CPS_Output.right(CPS_Output.length - lICC.toUnsigned());
				GPSystem.trace("Append record : ");
	if(tagPDI=="1101"){
					IccData = this.crypto.decrypt(key.KEK,this.crypto.DES_ECB,IccData);								
					changePin(myKey,IccData);
				}
				else if(tagPDI=="8101" || tagPDI=="8102" || tagPDI=="8103" || tagPDI=="8104"|| tagPDI=="8105"||tagPDI=="8201" || tagPDI=="8202" || tagPDI=="8203" || tagPDI=="8204"||tagPDI=="8205"){
	

				//	IccData = this.crypto.decrypt(key.KEK,this.crypto.DES_ECB,IccData);	
	  		 		IccData = IccData + '80';
					while(IccData.length%16 != 0){
						IccData = IccData + "00";
					}

	  				GPSystem.trace("IccData : " + IccData );					
					//putRSAKey(myKey,tagPDI,lICC,IccData);	
					IccData=new ByteString(IccData,HEX);	  	
					IccData = this.crypto.encrypt(this.key["KSCkek"],this.crypto.DES_ECB,IccData);	
					GPSystem.trace("encryptIccData : " + IccData );	
					//appendRecord(tagPDI,lICC,IccData);
					
					dataLen = IccData.getL();
	
					dgiTest = new ByteBuffer();
					dgiTest.append(tagPDI);
					dgiTest.append(dataLen.right(1));
					dgiTest.append(IccData);
	
					encryptedBySkudek(dgiTest.toByteString());	
						
				}else if(tagPDI=="8000"){
					GPSystem.trace("IccData8000 : " + IccData );
					IccData = this.crypto.encrypt(this.key["KSCkek"],this.crypto.DES_ECB,IccData);	
					GPSystem.trace("encryptIccData8000 : " + IccData );	
					dgiTest8000 = new ByteBuffer();
					dgiTest8000.append(tagPDI);
					dgiTest8000.append(lICC);
					dgiTest8000.append(IccData);
					GPSystem.trace("dgiTest8000=========> : " + dgiTest8000.toByteString() );			
					encryptedBySkudek(dgiTest8000.toByteString());
				}

				else if(tagPDI=="0701" ||tagPDI=="0702" ||tagPDI=="0703" ||tagPDI=="0D01" ||
				tagPDI=="0E01" ||tagPDI=="0E02" ){	
					GPSystem.trace("IccData : " + IccData );	
					appendRecord(tagPDI,lICC,IccData);
				} else if(tagPDI=="0001" || tagPDI=="0002" || tagPDI=="0003" || tagPDI=="0006" || tagPDI=="0601"){	
				}				
				else if(tagPDI=="9207"){	
					 dgi = new ByteBuffer();
					 dgi.append(tagPDI);
					 dgi.append(lICC);
					 dgi.append(IccData);
					 endPersonalization(dgi.toByteString());
				}	
					
				else{
				appendRecord(tagPDI,lICC,IccData);
				}
			}	

			
			//DGI-END(can't be modified)


                //7.  Send END PERSONALIZATION command to the card
   			//	endPersonalization(new ByteString("00",HEX));
   				this.closeSecureChannel();

		]]></Script>
	</ScriptFragment>


</ApplicationProfile>
